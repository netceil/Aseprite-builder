name: Build and deploy Aseprite

on:
  push:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/224436097)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
        echo "version_info<<EOF" >> $GITHUB_OUTPUT
        echo "$VERSION_INFO" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Should we start new build?
      id: should_build
      run: |
        if [[ "$LATEST_TAG" != *beta* && "$LATEST_TAG" != *rc* ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info }}
        draft: false
        prerelease: false

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        arch: [x64]
      fail-fast: false

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: (Windows) Install dependencies
        if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Download Skia (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          curl -o Skia-Windows-Release-X64.zip -L https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip
          unzip Skia-Windows-Release-X64.zip -d skia

      - name: Download Aseprite source
        run: |
          curl -o Aseprite-source.zip -L ${{ needs.check-version.outputs.download_url }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build

      - name: Set VS env
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64

      - name: Setup VS env
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-vsdevenv@v4

      - name: CMake
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build
        shell: cmd
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=..\..\skia -DSKIA_LIBRARY_DIR=..\..\skia\out\Release-x64 -DSKIA_LIBRARY=..\..\skia\out\Release-x64\skia.lib -DOPENSSL_ROOT_DIR=C:\OpenSSL -DOPENSSL_USE_STATIC_LIBS=TRUE -G Ninja ..

      - name: Build with Ninja
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Clean build bin
        working-directory: aseprite/build/bin
        shell: bash
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest

      - name: Add .ini file
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini

      - name: Add Multilingual
        working-directory: aseprite/build/bin/data
        shell: bash
        run: |
          rm -f strings/*.ini
          curl -o strings-main.zip -L https://codeload.github.com/aseprite/strings/zip/refs/heads/main
          unzip strings-main.zip -d strings-main
          cp strings-main/strings-main/*.ini strings
          rm -rf strings-main

      - name: Rename Executable (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build/bin
        run: ren aseprite.exe Aseprite.exe

      - name: Package ZIP
        working-directory: aseprite/build
        run: |
          mv bin Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}-${{ matrix.arch }}
          7z a -tzip Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}-${{ matrix.arch }}.zip Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}-${{ matrix.arch }}

      - name: Upload release asset
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}-${{ matrix.arch }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}-${{ matrix.arch }}.zip
          asset_content_type: application/zip