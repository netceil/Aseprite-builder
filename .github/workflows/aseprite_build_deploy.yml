name: Build and deploy Aseprite

on: push: branches: [ "main" ]

env: BUILD_TYPE: Release

jobs: check-version: name: Check latest Aseprite release runs-on: ubuntu-latest outputs: download_url: ${{ steps.version_info.outputs.download_url }} latest_tag: ${{ steps.version_info.outputs.latest_tag }} upload_url: ${{ steps.create_release.outputs.upload_url }}

steps:
  - name: Get latest version info
    id: version_info
    run: |
      data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
      LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
      DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
      VERSION_INFO=$(echo "${data}" | jq -r '.body')
      echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
      echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
      echo "version_info<<EOF" >> $GITHUB_OUTPUT
      echo "$VERSION_INFO" >> $GITHUB_OUTPUT
      echo "EOF" >> $GITHUB_OUTPUT

  - name: Create Release
    id: create_release
    uses: actions/create-release@v1
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    with:
      tag_name: ${{ steps.version_info.outputs.latest_tag }}
      release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
      body: |
        ${{ steps.version_info.outputs.version_info }}
      draft: false
      prerelease: false

build-aseprite: name: Build Aseprite needs: check-version runs-on: ${{ matrix.os }} strategy: matrix: os: [windows-latest] arch: [x64] fail-fast: false

steps:
  - name: Checkout the repository
    uses: actions/checkout@v2

  - name: (Windows) Install dependencies
    if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
    uses: seanmiddleditch/gha-setup-ninja@v3

  - name: Download Skia
    run: |
      curl -o Skia-${{ runner.os }}-Release-X64.zip -L https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-${{ runner.os }}-Release-x64.zip
      unzip Skia-${{ runner.os }}-Release-X64.zip -d skia

  - name: Download Aseprite release
    run: |
      curl -o Aseprite-source.zip -L ${{ needs.check-version.outputs.download_url }}
      unzip Aseprite-source.zip -d aseprite
      mkdir -p aseprite/build

  - name: (Windows) Set architecture for the produced binary
    if: matrix.os == 'windows-latest'
    shell: cmd
    run: call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64

  - name: (Windows) Setting Visual Studio build environment variables and paths
    if: matrix.os == 'windows-latest'
    uses: seanmiddleditch/gha-setup-vsdevenv@v4

  - name: (Windows) Run CMake
    if: matrix.os == 'windows-latest'
    working-directory: aseprite/build
    shell: cmd
    run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=..\\skia -DSKIA_LIBRARY_DIR=..\\skia\\out\\Release-x64 -DSKIA_LIBRARY=..\\skia\\out\\Release-x64\\skia.lib -DOPENSSL_ROOT_DIR=C:\\OpenSSL -DOPENSSL_USE_STATIC_LIBS=TRUE -G Ninja ..

  - name: Run Ninja
    working-directory: aseprite/build
    run: ninja aseprite

  - name: Package and Upload
    run: |
      cd aseprite/build/bin
      echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
      mkdir -p Aseprite-${{ needs.check-version.outputs.latest_tag }}-windows-x64
      cp aseprite.exe Aseprite-${{ needs.check-version.outputs.latest_tag }}-windows-x64/
      cp aseprite.ini Aseprite-${{ needs.check-version.outputs.latest_tag }}-windows-x64/
      7z a -tzip Aseprite-${{ needs.check-version.outputs.latest_tag }}-windows-x64.zip Aseprite-${{ needs.check-version.outputs.latest_tag }}-windows-x64
  - name: Upload release asset
    uses: actions/upload-release-asset@v1
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    with:
      upload_url: ${{ needs.check-version.outputs.upload_url }}
      asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-windows-x64.zip
      asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-windows-x64.zip
      asset_content_type: application/zip

